version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: audience-manager-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - audience-manager-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: audience-manager-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - audience-manager-network

  # Kafka UI for Management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: audience-manager-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - audience-manager-network

  # Aerospike Database
  aerospike:
    image: aerospike/aerospike-server:6.4.0.8
    container_name: audience-manager-aerospike
    ports:
      - "3000:3000"
      - "3001:3001"
      - "3002:3002"
    volumes:
      - aerospike-data:/opt/aerospike/data
      - ./configs/aerospike.conf:/etc/aerospike/aerospike.conf
    networks:
      - audience-manager-network

  # PostgreSQL Database
  postgres:
    image: postgres:15.5-alpine
    container_name: audience-manager-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: audience_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - audience-manager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5



  # Flink JobManager
  flink-jobmanager:
    image: flink:1.17.1-scala_2.12-java11
    container_name: audience-manager-flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
        state.backend: rocksdb
        state.checkpoints.dir: file:///checkpoints
        state.savepoints.dir: file:///savepoints
    volumes:
      - flink-checkpoints:/checkpoints
      - flink-savepoints:/savepoints
    networks:
      - audience-manager-network

  # Flink TaskManager
  flink-taskmanager:
    image: flink:1.17.1-scala_2.12-java11
    container_name: audience-manager-flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
    volumes:
      - flink-checkpoints:/checkpoints
      - flink-savepoints:/savepoints
    networks:
      - audience-manager-network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: audience-manager-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - audience-manager-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: audience-manager-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - audience-manager-network

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:
  aerospike-data:
  flink-checkpoints:
  flink-savepoints:
  prometheus-data:
  grafana-data:

networks:
  audience-manager-network:
    driver: bridge