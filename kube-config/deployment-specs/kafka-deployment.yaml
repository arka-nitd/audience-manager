apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: audience-manager-demo
  labels:
    app: zookeeper
    component: messaging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
        component: messaging
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        ports:
        - containerPort: 2181
          name: client
        resources:
          requests:
            memory: "200Mi"
            cpu: "100m"
          limits:
            memory: "300Mi"
            cpu: "500m"
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        - name: ZOOKEEPER_INIT_LIMIT
          value: "5"
        - name: ZOOKEEPER_SYNC_LIMIT
          value: "2"
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx200m -Xms200m"  # Conservative heap for demo
        volumeMounts:
        - mountPath: /var/lib/zookeeper/data
          name: zookeeper-data
        - mountPath: /var/lib/zookeeper/log
          name: zookeeper-logs
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "echo srvr | nc localhost 2181"
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "echo srvr | nc localhost 2181"
          initialDelaySeconds: 30
          periodSeconds: 15
      volumes:
      - name: zookeeper-data
        emptyDir: {}
      - name: zookeeper-logs
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: audience-manager-demo
  labels:
    app: zookeeper
    component: messaging
spec:
  ports:
  - port: 2181
    targetPort: 2181
    name: client
  selector:
    app: zookeeper

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: audience-manager-demo
  labels:
    app: kafka
    component: messaging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
        component: messaging
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 9101
          name: jmx
        resources:
          requests:
            memory: "800Mi"
            cpu: "200m"
          limits:
            memory: "1200Mi"
            cpu: "800m"
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-service:2181"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-service:29092,PLAINTEXT_HOST://localhost:30092"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "0"
        - name: KAFKA_JMX_PORT
          value: "9101"
        - name: KAFKA_JMX_HOSTNAME
          value: "kafka-service"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        # Demo-optimized Kafka settings for 1.2GB memory limit
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx600m -Xms600m"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "24"  # Short retention for demo
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "104857600"  # 100MB segments
        - name: KAFKA_LOG_RETENTION_BYTES
          value: "1073741824"  # 1GB total retention
        - name: KAFKA_NUM_NETWORK_THREADS
          value: "2"  # Limited for demo
        - name: KAFKA_NUM_IO_THREADS
          value: "2"  # Limited for demo
        - name: KAFKA_SOCKET_SEND_BUFFER_BYTES
          value: "102400"  # 100KB
        - name: KAFKA_SOCKET_RECEIVE_BUFFER_BYTES
          value: "102400"  # 100KB
        - name: KAFKA_SOCKET_REQUEST_MAX_BYTES
          value: "104857600"  # 100MB
        - name: KAFKA_NUM_PARTITIONS
          value: "2"  # Limited partitions for demo
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "1"  # Single replica for demo
        volumeMounts:
        - mountPath: /var/lib/kafka/data
          name: kafka-data
        readinessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 45
          periodSeconds: 15
        livenessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 60
          periodSeconds: 30
      initContainers:
      - name: wait-for-zookeeper
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z zookeeper-service 2181; do echo waiting for zookeeper; sleep 2; done']
      volumes:
      - name: kafka-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: audience-manager-demo
  labels:
    app: kafka
    component: messaging
spec:
  type: NodePort
  ports:
  - name: kafka
    port: 29092
    targetPort: 29092
  - name: kafka-external
    port: 9092
    targetPort: 9092
    nodePort: 30092
  - name: jmx
    port: 9101
    targetPort: 9101
  selector:
    app: kafka

---
# Kafka Topics Creation Job
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-topics-setup
  namespace: audience-manager-demo
  labels:
    app: kafka-setup
    component: messaging
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: kafka-topics-setup
        image: confluentinc/cp-kafka:7.4.0
        command:
        - /bin/bash
        - -c
        - |
          # Wait for Kafka to be ready
          until kafka-broker-api-versions --bootstrap-server kafka-service:29092; do
            echo "Waiting for Kafka to be ready..."
            sleep 10
          done
          
          # Create demo topics
          kafka-topics --create --topic user-events \
            --bootstrap-server kafka-service:29092 \
            --partitions 2 --replication-factor 1 --if-not-exists
          
          kafka-topics --create --topic segment-updates \
            --bootstrap-server kafka-service:29092 \
            --partitions 2 --replication-factor 1 --if-not-exists
          
          kafka-topics --create --topic user-segments \
            --bootstrap-server kafka-service:29092 \
            --partitions 2 --replication-factor 1 --if-not-exists
          
          kafka-topics --create --topic notification-requests \
            --bootstrap-server kafka-service:29092 \
            --partitions 2 --replication-factor 1 --if-not-exists
          
          echo "Demo topics created successfully"
      initContainers:
      - name: wait-for-kafka
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z kafka-service 29092; do echo waiting for kafka; sleep 5; done']