---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: audience-manager-api
  namespace: audience-manager-demo
  labels:
    app: audience-manager-api
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: audience-manager-api
  template:
    metadata:
      labels:
        app: audience-manager-api
        component: backend
    spec:
      containers:
      - name: audience-manager-api
        image: audience-manager-api:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/audiencemanager"
        - name: SPRING_DATASOURCE_USERNAME
          value: "audiencemanager"
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
          value: "health,prometheus,metrics"
        - name: JAVA_OPTS
          value: "-Xmx512m -Xms256m"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: audience-manager-api-config
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: audience-manager-api-service
  namespace: audience-manager-demo
  labels:
    app: audience-manager-api
    component: backend
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30180
    name: http
  selector:
    app: audience-manager-api

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: audience-manager-api-config
  namespace: audience-manager-demo
  labels:
    app: audience-manager-api
data:
  application-kubernetes.yml: |
    spring:
      application:
        name: audience-manager-api
      datasource:
        url: jdbc:postgresql://postgres:5432/audiencemanager
        username: audiencemanager
        driver-class-name: org.postgresql.Driver
        hikari:
          maximum-pool-size: 10
          minimum-idle: 2
          connection-timeout: 20000
          idle-timeout: 300000
          max-lifetime: 1200000
      jpa:
        hibernate:
          ddl-auto: update
        properties:
          hibernate:
            dialect: org.hibernate.dialect.PostgreSQLDialect
            format_sql: true
        show-sql: false
      kafka:
        bootstrap-servers: kafka:9092
        producer:
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
        template:
          default-topic: segment-events

    server:
      port: 8080
      servlet:
        context-path: /api/v1

    management:
      endpoints:
        web:
          exposure:
            include: health,prometheus,metrics,info
          base-path: /actuator
      endpoint:
        health:
          show-details: always
          probes:
            enabled: true
      health:
        readiness-state:
          enabled: true
        liveness-state:
          enabled: true
      metrics:
        export:
          prometheus:
            enabled: true

    logging:
      level:
        com.audiencemanager: INFO
        org.springframework.kafka: WARN
        org.hibernate.SQL: WARN
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: audience-manager-demo
type: Opaque
data:
  password: YXVkaWVuY2VtYW5hZ2Vy  # base64 encoded "audiencemanager"